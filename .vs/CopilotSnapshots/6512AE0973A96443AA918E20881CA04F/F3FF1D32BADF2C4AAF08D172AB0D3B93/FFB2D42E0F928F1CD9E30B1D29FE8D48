using System;
using System.Threading;
using System.Windows;
using DesktopTaskAid.Models;
using DesktopTaskAid.Services;
using DesktopTaskAid.ViewModels;
using NUnit.Framework;

namespace DesktopTaskAid.Tests
{
    /// <summary>
    /// Note: MainWindow tests are excluded because they require full WPF XAML initialization
    /// which is not suitable for unit testing. MainWindow should be tested through UI automation
    /// or integration tests instead.
    /// </summary>

    [TestFixture]
    [Apartment(ApartmentState.STA)]
    public class MainViewModelAdditionalTests
    {
        [SetUp]
        public void Setup()
        {
            if (Application.Current == null)
            {
                new Application();
            }
            Application.Current.Resources.MergedDictionaries.Clear();
            Application.Current.Resources["IsDarkTheme"] = false;
        }

        [Test]
        public void MainViewModel_Constructor_InitializesAllCommands()
        {
            var vm = new MainViewModel();

            Assert.IsNotNull(vm.ToggleThemeCommand);
            Assert.IsNotNull(vm.ToggleTimerCommand);
            Assert.IsNotNull(vm.ResetTimerCommand);
            Assert.IsNotNull(vm.PreviousMonthCommand);
            Assert.IsNotNull(vm.NextMonthCommand);
            Assert.IsNotNull(vm.SelectDateCommand);
            Assert.IsNotNull(vm.AddTaskCommand);
            Assert.IsNotNull(vm.EditTaskCommand);
            Assert.IsNotNull(vm.DeleteTaskCommand);
            Assert.IsNotNull(vm.SaveTaskCommand);
            Assert.IsNotNull(vm.CloseModalCommand);
            Assert.IsNotNull(vm.PreviousPageCommand);
            Assert.IsNotNull(vm.NextPageCommand);
            Assert.IsNotNull(vm.ImportNextMonthCommand);
            Assert.IsNotNull(vm.CreateGoogleAccountCommand);
            Assert.IsNotNull(vm.OpenCalendarImportModalCommand);
            Assert.IsNotNull(vm.CloseCalendarImportModalCommand);
        }

        [Test]
        public void MainViewModel_Constructor_InitializesAllCollections()
        {
            var vm = new MainViewModel();

            Assert.IsNotNull(vm.AllTasks);
            Assert.IsNotNull(vm.DisplayedTasks);
            Assert.IsNotNull(vm.CalendarDays);
            Assert.IsNotNull(vm.DailyTasks);
        }

        [Test]
        public void MainViewModel_Constructor_SetsDefaultValues()
        {
            var vm = new MainViewModel();

            Assert.Greater(vm.PageSize, 0);
            Assert.GreaterOrEqual(vm.CurrentPage, 1);
            Assert.IsNotNull(vm.CurrentTheme);
            Assert.IsNotNull(vm.CurrentMonthDisplay);
            Assert.IsNotNull(vm.PaginationText);
        }

        [Test]
        public void MainViewModel_ThemeChanged_EventExists()
        {
            var vm = new MainViewModel();
            
            // ThemeChanged is a public event that can be subscribed to
            vm.ThemeChanged += () => { /* handler */ };
            
            Assert.IsNotNull(vm);
        }

        [Test]
        public void MainViewModel_AllProperties_CanBeSetAndGet()
        {
            var vm = new MainViewModel();

            // Test string properties
            vm.SearchText = "test search";
            Assert.AreEqual("test search", vm.SearchText);

            vm.CurrentTheme = "dark";
            Assert.AreEqual("dark", vm.CurrentTheme);

            vm.ModalTitle = "Test Modal";
            Assert.AreEqual("Test Modal", vm.ModalTitle);

            vm.ImportStatusMessage = "Test Status";
            Assert.AreEqual("Test Status", vm.ImportStatusMessage);

            // Test boolean properties
            vm.IsDarkTheme = true;
            Assert.IsTrue(vm.IsDarkTheme);

            vm.TimerRunning = true;
            Assert.IsTrue(vm.TimerRunning);

            vm.IsModalOpen = true;
            Assert.IsTrue(vm.IsModalOpen);

            vm.IsCalendarImportModalOpen = true;
            Assert.IsTrue(vm.IsCalendarImportModalOpen);

            // Test integer properties
            vm.TimerRemaining = 100;
            Assert.AreEqual(100, vm.TimerRemaining);

            vm.DoneTodaySeconds = 500;
            Assert.AreEqual(500, vm.DoneTodaySeconds);

            vm.DailyTaskCount = 5;
            Assert.AreEqual(5, vm.DailyTaskCount);

            vm.CurrentPage = 2;
            Assert.AreEqual(2, vm.CurrentPage);

            vm.PageSize = 15;
            Assert.AreEqual(15, vm.PageSize);

            // Test DateTime properties
            var testDate = new DateTime(2025, 6, 15);
            vm.CurrentMonth = testDate;
            Assert.AreEqual(testDate, vm.CurrentMonth);

            vm.SelectedDate = testDate;
            Assert.AreEqual(testDate, vm.SelectedDate);
        }

        [Test]
        public void MainViewModel_Commands_CanExecute()
        {
            var vm = new MainViewModel();

            // Commands that should always be executable
            Assert.IsTrue(vm.ToggleThemeCommand.CanExecute(null));
            Assert.IsTrue(vm.ToggleTimerCommand.CanExecute(null));
            Assert.IsTrue(vm.ResetTimerCommand.CanExecute(null));
            Assert.IsTrue(vm.PreviousMonthCommand.CanExecute(null));
            Assert.IsTrue(vm.NextMonthCommand.CanExecute(null));
            Assert.IsTrue(vm.AddTaskCommand.CanExecute(null));
            Assert.IsTrue(vm.SaveTaskCommand.CanExecute(null));
            Assert.IsTrue(vm.CloseModalCommand.CanExecute(null));
            Assert.IsTrue(vm.CloseCalendarImportModalCommand.CanExecute(null));
        }

        [Test]
        public void MainViewModel_OpenCalendarImportModal_SetsProperty()
        {
            var vm = new MainViewModel();

            Assert.IsFalse(vm.IsCalendarImportModalOpen);

            vm.OpenCalendarImportModalCommand.Execute(null);

            Assert.IsTrue(vm.IsCalendarImportModalOpen);
        }

        [Test]
        public void MainViewModel_CloseCalendarImportModal_ClearsProperty()
        {
            var vm = new MainViewModel();
            vm.OpenCalendarImportModalCommand.Execute(null);

            Assert.IsTrue(vm.IsCalendarImportModalOpen);

            vm.CloseCalendarImportModalCommand.Execute(null);

            Assert.IsFalse(vm.IsCalendarImportModalOpen);
        }

        [Test]
        public void MainViewModel_TimerButtonText_ChangesWithState()
        {
            var vm = new MainViewModel();

            vm.TimerRunning = false;
            Assert.AreEqual("Start Timer", vm.TimerButtonText);

            vm.TimerRunning = true;
            Assert.AreEqual("Pause Timer", vm.TimerButtonText);

            vm.TimerRunning = false;
            Assert.AreEqual("Start Timer", vm.TimerButtonText);
        }

        [Test]
        public void MainViewModel_SearchText_TriggersRefresh()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            for (int i = 0; i < 10; i++)
            {
                vm.AllTasks.Add(new TaskItem { Name = $"Task {i}", DueDate = DateTime.Today });
            }

            var initialCount = vm.DisplayedTasks.Count;

            vm.SearchText = "Task 5";

            // Should filter to only Task 5
            Assert.AreEqual(1, vm.DisplayedTasks.Count);
            Assert.AreEqual("Task 5", vm.DisplayedTasks[0].Name);
        }

        [Test]
        public void MainViewModel_PageSize_Change_ResetsToFirstPage()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            for (int i = 0; i < 20; i++)
            {
                vm.AllTasks.Add(new TaskItem { Name = $"Task {i}", DueDate = DateTime.Today });
            }

            vm.PageSize = 5;
            vm.CurrentPage = 3;

            Assert.AreEqual(3, vm.CurrentPage);

            vm.PageSize = 10; // This should reset to page 1

            Assert.AreEqual(1, vm.CurrentPage);
        }

        [Test]
        public void MainViewModel_CurrentMonth_Change_UpdatesDisplay()
        {
            var vm = new MainViewModel();
            var initialMonth = vm.CurrentMonth;

            vm.CurrentMonth = initialMonth.AddMonths(1);

            var expectedDisplay = initialMonth.AddMonths(1).ToString("MMMM yyyy", 
                System.Globalization.CultureInfo.InvariantCulture);
            Assert.AreEqual(expectedDisplay, vm.CurrentMonthDisplay);
        }

        [Test]
        public void MainViewModel_SelectedDate_Change_RefreshesDailyTasks()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            var targetDate = DateTime.Today.AddDays(3);
            vm.AllTasks.Add(new TaskItem 
            { 
                Name = "Test Task", 
                DueDate = targetDate,
                DueTime = TimeSpan.FromHours(10)
            });

            vm.SelectedDate = targetDate;

            Assert.AreEqual(1, vm.DailyTaskCount);
            Assert.AreEqual(targetDate.ToString("dddd, MMM dd", 
                System.Globalization.CultureInfo.InvariantCulture), vm.SelectedDateDisplay);
        }

        [Test]
        public void MainViewModel_AddTask_OpensModalWithDefaults()
        {
            var vm = new MainViewModel();

            vm.AddTaskCommand.Execute(null);

            Assert.IsTrue(vm.IsModalOpen);
            Assert.AreEqual("Add Task", vm.ModalTitle);
            Assert.IsNotNull(vm.EditingTask);
            Assert.AreEqual("active", vm.EditingTask.ReminderStatus);
        }

        [Test]
        public void MainViewModel_EditTask_OpensModalWithTaskData()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            var task = new TaskItem
            {
                Name = "Original Task",
                DueDate = DateTime.Today,
                DueTime = TimeSpan.FromHours(15),
                ReminderStatus = "active"
            };
            vm.AllTasks.Add(task);

            vm.EditTaskCommand.Execute(task);

            Assert.IsTrue(vm.IsModalOpen);
            Assert.AreEqual("Edit Task", vm.ModalTitle);
            Assert.IsNotNull(vm.EditingTask);
            Assert.AreEqual("Original Task", vm.EditingTask.Name);
            Assert.AreEqual(task.Id, vm.EditingTask.Id);
        }

        [Test]
        public void MainViewModel_SaveTask_AddsNewTask()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            vm.AddTaskCommand.Execute(null);
            vm.EditingTask.Name = "New Task";
            vm.EditingTask.ReminderStatus = "active";
            vm.SaveTaskCommand.Execute(null);

            Assert.AreEqual(1, vm.AllTasks.Count);
            Assert.AreEqual("New Task", vm.AllTasks[0].Name);
            Assert.IsFalse(vm.IsModalOpen);
        }

        [Test]
        public void MainViewModel_SaveTask_UpdatesExistingTask()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            var task = new TaskItem { Name = "Original", DueDate = DateTime.Today };
            vm.AllTasks.Add(task);

            vm.EditTaskCommand.Execute(task);
            vm.EditingTask.Name = "Updated";
            vm.SaveTaskCommand.Execute(null);

            Assert.AreEqual(1, vm.AllTasks.Count);
            Assert.AreEqual("Updated", vm.AllTasks[0].Name);
        }

        [Test]
        public void MainViewModel_CloseModal_ClearsEditingTask()
        {
            var vm = new MainViewModel();

            vm.AddTaskCommand.Execute(null);
            vm.EditingTask.Name = "Test";

            Assert.IsTrue(vm.IsModalOpen);
            Assert.IsNotNull(vm.EditingTask);

            vm.CloseModalCommand.Execute(null);

            Assert.IsFalse(vm.IsModalOpen);
            Assert.IsNull(vm.EditingTask);
        }

        [Test]
        public void MainViewModel_ResetTimer_StopsAndResetsValues()
        {
            var vm = new MainViewModel();

            // Start timer
            vm.ToggleTimerCommand.Execute(null);
            Assert.IsTrue(vm.TimerRunning);

            // Change remaining time
            vm.TimerRemaining = 100;

            // Reset
            vm.ResetTimerCommand.Execute(null);

            Assert.IsFalse(vm.TimerRunning);
            Assert.Greater(vm.TimerRemaining, 100); // Should be reset to default duration
        }

        [Test]
        public void MainViewModel_ToggleTimer_StartsAndStops()
        {
            var vm = new MainViewModel();

            Assert.IsFalse(vm.TimerRunning);

            vm.ToggleTimerCommand.Execute(null);
            Assert.IsTrue(vm.TimerRunning);

            vm.ToggleTimerCommand.Execute(null);
            Assert.IsFalse(vm.TimerRunning);
        }

        [Test]
        public void MainViewModel_PreviousMonth_DecreasesMonth()
        {
            var vm = new MainViewModel();
            var initial = vm.CurrentMonth;

            vm.PreviousMonthCommand.Execute(null);

            Assert.AreEqual(initial.AddMonths(-1).Month, vm.CurrentMonth.Month);
        }

        [Test]
        public void MainViewModel_NextMonth_IncreasesMonth()
        {
            var vm = new MainViewModel();
            var initial = vm.CurrentMonth;

            vm.NextMonthCommand.Execute(null);

            Assert.AreEqual(initial.AddMonths(1).Month, vm.CurrentMonth.Month);
        }

        [Test]
        public void MainViewModel_SelectDate_UpdatesSelectedDate()
        {
            var vm = new MainViewModel();
            var targetDate = new DateTime(2025, 7, 15);

            vm.SelectDateCommand.Execute(targetDate);

            Assert.AreEqual(targetDate, vm.SelectedDate);
        }

        [Test]
        public void MainViewModel_MultiplePropertyChanges_FireEvents()
        {
            var vm = new MainViewModel();
            var propertyChangedCount = 0;

            vm.PropertyChanged += (s, e) => propertyChangedCount++;

            vm.SearchText = "test";
            vm.CurrentPage = 2;
            vm.IsModalOpen = true;
            vm.TimerRunning = true;

            Assert.Greater(propertyChangedCount, 0);
        }

        [Test]
        public void MainViewModel_UpcomingTask_CanBeSet()
        {
            var vm = new MainViewModel();
            var task = new TaskItem 
            { 
                Name = "Upcoming", 
                DueDate = DateTime.Today.AddDays(1),
                DueTime = TimeSpan.FromHours(10)
            };

            vm.UpcomingTask = task;

            Assert.AreEqual(task, vm.UpcomingTask);
            Assert.AreEqual("Upcoming", vm.UpcomingTask.Name);
        }

        [Test]
        public void MainViewModel_PaginationText_UpdatesOnPageChange()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            for (int i = 0; i < 25; i++)
            {
                vm.AllTasks.Add(new TaskItem { Name = $"Task {i}", DueDate = DateTime.Today });
            }

            vm.PageSize = 10;
            vm.CurrentPage = 1;

            StringAssert.Contains("1 - 10 of 25", vm.PaginationText);

            vm.CurrentPage = 2;

            StringAssert.Contains("11 - 20 of 25", vm.PaginationText);
        }

        [Test]
        public void MainViewModel_CalendarDays_GeneratedOnConstruction()
        {
            var vm = new MainViewModel();

            Assert.Greater(vm.CalendarDays.Count, 0);
            // Calendar should have days for the current month plus placeholders
            Assert.GreaterOrEqual(vm.CalendarDays.Count, 28); // Minimum days in a month
        }

        [Test]
        public void MainViewModel_EditingTask_CanBeNull()
        {
            var vm = new MainViewModel();

            vm.EditingTask = null;

            Assert.IsNull(vm.EditingTask);
        }

        [Test]
        public void MainViewModel_Constructor_LogsInitialization()
        {
            var vm = new MainViewModel();

            var path = LoggingService.GetLogFilePath();
            var content = System.IO.File.ReadAllText(path);

            StringAssert.Contains("MainViewModel Constructor BEGIN", content);
            StringAssert.Contains("MainViewModel Constructor COMPLETED SUCCESSFULLY", content);
        }

        [Test]
        public void MainViewModel_AllTasks_CanBeCleared()
        {
            var vm = new MainViewModel();
            
            vm.AllTasks.Add(new TaskItem { Name = "Test", DueDate = DateTime.Today });
            Assert.Greater(vm.AllTasks.Count, 0);

            vm.AllTasks.Clear();
            Assert.AreEqual(0, vm.AllTasks.Count);
        }

        [Test]
        public void MainViewModel_DisplayedTasks_UpdatesOnAllTasksChange()
        {
            var vm = new MainViewModel();
            vm.AllTasks.Clear();

            vm.AllTasks.Add(new TaskItem { Name = "Task 1", DueDate = DateTime.Today });
            
            // DisplayedTasks should update when AllTasks changes (via property setters)
            Assert.IsNotNull(vm.DisplayedTasks);
        }

        [Test]
        public void MainViewModel_HasValidCredentials_DefaultsToFalse()
        {
            var vm = new MainViewModel();

            // HasValidCredentials should be false initially
            Assert.IsFalse(vm.HasValidCredentials);
        }

        [Test]
        public void MainViewModel_IsImportRunning_DefaultsToFalse()
        {
            var vm = new MainViewModel();

            Assert.IsFalse(vm.IsImportRunning);
        }
    }
}
